upstream flask_app {
    server flask:5000;
}

upstream mcp_app {
    server mcp-server:${MCP_PORT};
}

server {
    listen 0.0.0.0:${TOPOLOGRAPH_PORT};
    server_name _;
    error_log  /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log;
    client_max_body_size 64M;

    # Route MCP requests to MCP server with token validation
    location ~ ^/mcp(/.*)?$ {
        auth_request /auth;
        proxy_pass http://mcp_app$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Forwarded-Host $host:$server_port;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        
        # Handle WebSocket connections for MCP if needed
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Token validation endpoint for NGINX auth_request
    location = /auth {
        proxy_pass http://flask_app/validate-user;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
    }

    # Route Socket.IO requests to Flask
    location /socket.io/ {
        proxy_pass http://flask_app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host:$server_port;
    }

    # Route all other requests to Flask
    location / {
        proxy_pass http://flask_app;
        proxy_http_version 1.1;
        proxy_set_header Host $host:$server_port;
        proxy_set_header X-Forwarded-Host $host:$server_port;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}