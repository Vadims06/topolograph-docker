services:

  flask:
    container_name: flask
    image: vadims06/topolograph:latest
    restart: unless-stopped
    environment:
      APP_ENV: "prod"
      APP_DEBUG: "False"
      APP_PORT: 5000
      MONGODB_DATABASE: $MONGODB_DATABASE
      MONGODB_USERNAME: $MONGODB_USERNAME
      MONGODB_PASSWORD: $MONGODB_PASSWORD
      MONGODB_HOSTNAME: $MONGODB_HOSTNAME
      NAPALM_USERNAME: $NAPALM_USERNAME
      NAPALM_PASSWORD: $NAPALM_PASSWORD
      NAPALM_PORT: $NAPALM_PORT
      DNS: $DNS
      NETBOX_URL: $NETBOX_URL # http://localhost:8000
      NETBOX_RO_TOKEN : $NETBOX_RO_TOKEN
      TOPOLOGRAPH_WEB_API_USERNAME_EMAIL: $TOPOLOGRAPH_WEB_API_USERNAME_EMAIL
      TOPOLOGRAPH_WEB_API_PASSWORD: $TOPOLOGRAPH_WEB_API_PASSWORD
      TOPOLOGRAPH_WEB_API_AUTHORISED_NETWORKS: $TOPOLOGRAPH_WEB_API_AUTHORISED_NETWORKS
      SWAGGER_HOST: 'localhost:$TOPOLOGRAPH_PORT'
    depends_on:
      - mongodb
    networks:
      - frontend
      - backend

  mongodb:
    image: mongo:4.2 # Upgrade to 4.2 First, Then to 4.4.29
    container_name: mongodb
    restart: unless-stopped
    command: mongod --auth
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: $MONGODB_USERNAME
      MONGO_INITDB_ROOT_PASSWORD: $MONGODB_PASSWORD
      MONGO_INITDB_DATABASE: $MONGODB_DATABASE
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - mongodbdata:/data/db
    networks:
      - backend

  webserver:
    build:
      context: webserver
      dockerfile: Dockerfile
    container_name: webserver
    restart: unless-stopped
    environment:
      TOPOLOGRAPH_PORT: ${TOPOLOGRAPH_PORT:-8080}
    ports:
      - "${TOPOLOGRAPH_PORT:-8080}:${TOPOLOGRAPH_PORT:-8080}"
    volumes:
      - type: volume
        source: nginxdata
        target: /var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

  flask-create-creds-from-env:
    image: vadims06/topolograph:latest
    environment:
      TOPOLOGRAPH_PORT: 5000
      TOPOLOGRAPH_HOST: flask
      TOPOLOGRAPH_WEB_API_USERNAME_EMAIL: $TOPOLOGRAPH_WEB_API_USERNAME_EMAIL
      TOPOLOGRAPH_WEB_API_PASSWORD: $TOPOLOGRAPH_WEB_API_PASSWORD
      TOPOLOGRAPH_WEB_API_AUTHORISED_NETWORKS: $TOPOLOGRAPH_WEB_API_AUTHORISED_NETWORKS
    command: ["python", "/home/flask/create_credentials_from_env.py"]
    volumes:
      - type: bind
        source: ./init/create_credentials_from_env.py
        target: /home/flask/create_credentials_from_env.py
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    name: topolograph_backend
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  nginxdata:
    driver: local
